{"ast":null,"code":"var _jsxFileName = \"/home/joann/FinalProject/intrusion-detection-stystem/Frontend/src/components/filter/index.js\";\nimport React from 'react';\nimport * as d3 from 'd3';\nimport { Fab, Grid } from '@material-ui/core';\nimport NavigationIcon from '@material-ui/icons/Navigation';\nimport dataset from './dataset.csv';\n\nvar _ = require(\"underscore\");\n\nconst {\n  Parser\n} = require('json2csv');\n\nvar data, subset, result; //global object\n//the convert function will convert csv to object and then format it (convert strings to numbers) \n\nconst convert = (e, attackname) => {\n  d3.csv(dataset).then(function (dataset) {\n    dataset.forEach(function (d) {\n      d.duration = +d.duration;\n      d.src_bytes = +d.src_bytes;\n      d.dst_bytes = +d.dst_bytes;\n      d.land = +d.land;\n      d.wrong_fragment = +d.wrong_fragment;\n      d.urgent = +d.urgent;\n      d.hot = +d.hot;\n      d.num_failed_logins = +d.num_failed_logins;\n      d.logged_in = +d.logged_in;\n      d.num_compromised = +d.num_compromised;\n      d.root_shell = +d.root_shell;\n      d.su_attempted = +d.su_attempted;\n      d.num_root = +d.num_root;\n      d.num_file_creations = +d.num_file_creations;\n      d.num_shells = +d.num_shells;\n      d.num_access_files = +d.num_access_files;\n      d.num_outbound_cmds = +d.num_outbound_cmds;\n      d.is_host_login = +d.is_host_login;\n      d.is_guest_login = +d.is_guest_login;\n      d.count = +d.count;\n      d.srv_count = +d.srv_count;\n      d.serror_rate = +d.serror_rate;\n      d.srv_serror_rate = +d.srv_serror_rate;\n      d.rerror_rate = +d.rerror_rate;\n      d.srv_rerror_rate = +d.srv_rerror_rate;\n      d.same_srv_rate = +d.same_srv_rate;\n      d.diff_srv_rate = +d.diff_srv_rate;\n      d.srv_diff_host_rate = +d.srv_diff_host_rate;\n      d.dst_host_count = +d.dst_host_count;\n      d.dst_host_srv_count = +d.dst_host_srv_count;\n      d.dst_host_same_srv_rate = +d.dst_host_same_srv_rate;\n      d.dst_host_diff_srv_rate = +d.dst_host_diff_srv_rate;\n      d.dst_host_same_src_port_rate = +d.dst_host_same_src_port_rate;\n      d.dst_host_srv_diff_host_rate = +d.dst_host_srv_diff_host_rate;\n      d.dst_host_serror_rate = +d.dst_host_serror_rate;\n      d.dst_host_srv_serror_rate = +d.dst_host_srv_serror_rate;\n      d.dst_host_rerror_rate = +d.dst_host_rerror_rate;\n      d.dst_host_srv_rerror_rate = +d.dst_host_srv_rerror_rate;\n      d.level = +d.level;\n    }); //end of for each\n\n    data = dataset; //copying the formatted data to variable data.\n\n    map(attackname);\n  }).catch(function (err) {\n    throw err;\n  });\n}; // map function does the filtering of the dataset and stores it in: result.\n\n\nconst map = attackname => {\n  result = _.where(data, {\n    attack: attackname\n  });\n  slice();\n}; //The slice function will slice the array of object from random startig position to fixed size\n\n\nconst slice = () => {\n  var max = result.length - 50;\n  var min = 1;\n  var random = Math.floor(Math.random() * (max - min)) + min;\n  subset = result.slice(random, random + 50); //subset now contains object to be parsed into csv file and then send.\n\n  parse();\n};\n\nconst parse = () => {\n  const fields = [\"duration\", \"protocol_type\", \"service\", \"flag\", \"src_bytes\", \"dst_bytes\", \"land\", \"wrong_fragment\", \"urgent\", \"hot\", \"num_failed_logins\", \"logged_in\", \"num_compromised\", \"root_shell\", \"su_attempted\", \"num_root\", \"num_file_creations\", \"num_shells\", \"num_access_files\", \"num_outbound_cmds\", \"is_host_login\", \"is_guest_login\", \"count\", \"srv_count\", \"serror_rate\", \"srv_serror_rate\", \"rerror_rate\", \"srv_rerror_rate\", \"same_srv_rate\", \"diff_srv_rate\", \"srv_diff_host_rate\", \"dst_host_count\", \"dst_host_srv_count\", \"dst_host_same_srv_rate\", \"dst_host_diff_srv_rate\", \"dst_host_same_src_port_rate\", \"dst_host_srv_diff_host_rate\", \"dst_host_serror_rate\", \"dst_host_srv_serror_rate\", \"dst_host_rerror_rate\", \"dst_host_srv_rerror_rate\", \"attack\", \"level\"];\n  const json2csvParser = new Parser({\n    fields\n  });\n  const subsetcsv = json2csvParser.parse(subset);\n  console.log(subset); // window.location.href ='http://localhost:3000/result';            //This can be used for redirecting.\n  // now subset contains json format and csv contains subsetcsv format.\n};\n\nconst Filter = () => {\n  return React.createElement(\"div\", {\n    style: {\n      height: `${window.innerHeight - 85}px`\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      paddingTop: \"200px\",\n      textAlign: \"center\",\n      fontSize: '40px',\n      fontFamily: 'Righteous',\n      color: '#0099cc'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \" Select attack to simulate: \"), React.createElement(\"div\", {\n    style: {\n      margin: \"100px 200px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(Fab, {\n    variant: \"extended\",\n    onClick: e => convert(e, \"neptune\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(NavigationIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }), \"Neptune\")), React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(Fab, {\n    variant: \"extended\",\n    onClick: e => convert(e, \"guess_passwd\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \"                   \", React.createElement(NavigationIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }), \"guess_passwd\")), React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(Fab, {\n    variant: \"extended\",\n    onClick: e => convert(e, \"satan\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(NavigationIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }), \"satan\")), React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(Fab, {\n    variant: \"extended\",\n    onClick: e => convert(e, \"normal\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(NavigationIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }), \"normal\")))), React.createElement(\"a\", {\n    href: \"http://localhost:3000/result\",\n    style: {\n      color: 'black'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, \"result page\"), React.createElement(\"div\", {\n    className: \"button-details\",\n    style: {\n      marginTop: '100px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, \"Sign Out\")));\n};\n\nexport default Filter;","map":{"version":3,"sources":["/home/joann/FinalProject/intrusion-detection-stystem/Frontend/src/components/filter/index.js"],"names":["React","d3","Fab","Grid","NavigationIcon","dataset","_","require","Parser","data","subset","result","convert","e","attackname","csv","then","forEach","d","duration","src_bytes","dst_bytes","land","wrong_fragment","urgent","hot","num_failed_logins","logged_in","num_compromised","root_shell","su_attempted","num_root","num_file_creations","num_shells","num_access_files","num_outbound_cmds","is_host_login","is_guest_login","count","srv_count","serror_rate","srv_serror_rate","rerror_rate","srv_rerror_rate","same_srv_rate","diff_srv_rate","srv_diff_host_rate","dst_host_count","dst_host_srv_count","dst_host_same_srv_rate","dst_host_diff_srv_rate","dst_host_same_src_port_rate","dst_host_srv_diff_host_rate","dst_host_serror_rate","dst_host_srv_serror_rate","dst_host_rerror_rate","dst_host_srv_rerror_rate","level","map","catch","err","where","attack","slice","max","length","min","random","Math","floor","parse","fields","json2csvParser","subsetcsv","console","log","Filter","height","window","innerHeight","paddingTop","textAlign","fontSize","fontFamily","color","margin","marginTop"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as d3 from 'd3';\nimport { Fab,Grid } from '@material-ui/core';\nimport NavigationIcon from '@material-ui/icons/Navigation';\nimport  dataset from './dataset.csv';\nvar _ = require(\"underscore\");\nconst { Parser } = require('json2csv');\nvar data,subset,result; //global object\n\n//the convert function will convert csv to object and then format it (convert strings to numbers) \nconst convert = (e, attackname)=>{\n\n    d3.csv(dataset).then(function(dataset) {\n        \n        dataset.forEach(function(d){\n            d.duration=+d.duration;\n            d.src_bytes=+d.src_bytes;\n            d.dst_bytes=+d.dst_bytes;\n            d.land=+d.land;\n            d.wrong_fragment=+d.wrong_fragment;\n            d.urgent=+d.urgent;\n            d.hot=+d.hot;\n            d.num_failed_logins=+d.num_failed_logins\n            d.logged_in=+d.logged_in;\n            d.num_compromised=+d.num_compromised;\n            d.root_shell=+d.root_shell\n            d.su_attempted=+d.su_attempted\n            d.num_root=+d.num_root\n            d.num_file_creations=+d.num_file_creations\n            d.num_shells=+d.num_shells\n            d.num_access_files=+d.num_access_files\n            d.num_outbound_cmds=+d.num_outbound_cmds\n            d.is_host_login=+d.is_host_login\n            d.is_guest_login=+d.is_guest_login\n            d.count=+d.count\n            d.srv_count=+d.srv_count\n            d.serror_rate=+d.serror_rate\n            d.srv_serror_rate=+d.srv_serror_rate\n            d.rerror_rate=+d.rerror_rate\n            d.srv_rerror_rate=+d.srv_rerror_rate\n            d.same_srv_rate=+d.same_srv_rate\n            d.diff_srv_rate=+d.diff_srv_rate\n            d.srv_diff_host_rate=+d.srv_diff_host_rate\n            d.dst_host_count=+d.dst_host_count\n            d.dst_host_srv_count=+d.dst_host_srv_count\n            d.dst_host_same_srv_rate=+d.dst_host_same_srv_rate\n            d.dst_host_diff_srv_rate=+d.dst_host_diff_srv_rate\n            d.dst_host_same_src_port_rate=+d.dst_host_same_src_port_rate\n            d.dst_host_srv_diff_host_rate=+d.dst_host_srv_diff_host_rate\n            d.dst_host_serror_rate=+d.dst_host_serror_rate\n            d.dst_host_srv_serror_rate=+d.dst_host_srv_serror_rate\n            d.dst_host_rerror_rate=+d.dst_host_rerror_rate\n            d.dst_host_srv_rerror_rate=+d.dst_host_srv_rerror_rate            \n            d.level=+d.level;\n        })\n        //end of for each\n        \n        data=dataset;   //copying the formatted data to variable data.\n        map(attackname);\n\n    }).catch(function(err) {\n        throw err;\n    })\n   }\n// map function does the filtering of the dataset and stores it in: result.\n const map = (attackname) => {\n    result = _.where(data, {attack:attackname});\n    slice();\n  }\n  \n  \n\n//The slice function will slice the array of object from random startig position to fixed size\nconst slice = ()=>{\n        var max=result.length-50;\n        var min=1;\n        var random = Math.floor(Math.random() * (max - min) ) + min;\n        \n        subset = result.slice(random,random+50);\n        \n                                //subset now contains object to be parsed into csv file and then send.\n        parse();\n}\n\n\nconst parse=()=>{\n    const fields = [\n        \"duration\",\n       \"protocol_type\",\n        \"service\",\n        \"flag\",\n        \"src_bytes\",\n        \"dst_bytes\",\n        \"land\",\n        \"wrong_fragment\",\n        \"urgent\",\n        \"hot\",\n        \"num_failed_logins\",\n        \"logged_in\",\n        \"num_compromised\",\n        \"root_shell\",\n        \"su_attempted\",\n        \"num_root\",\n        \"num_file_creations\",\n        \"num_shells\",\n        \"num_access_files\",\n        \"num_outbound_cmds\",\n        \"is_host_login\",\n        \"is_guest_login\",\n        \"count\",\n        \"srv_count\",\n        \"serror_rate\",\n        \"srv_serror_rate\",\n        \"rerror_rate\",\n        \"srv_rerror_rate\",\n        \"same_srv_rate\",\n        \"diff_srv_rate\",\n        \"srv_diff_host_rate\",\n        \"dst_host_count\",\n        \"dst_host_srv_count\",\n        \"dst_host_same_srv_rate\",\n        \"dst_host_diff_srv_rate\",\n        \"dst_host_same_src_port_rate\",\n        \"dst_host_srv_diff_host_rate\",\n        \"dst_host_serror_rate\",\n        \"dst_host_srv_serror_rate\",\n        \"dst_host_rerror_rate\",\n        \"dst_host_srv_rerror_rate\",\n        \"attack\",\n        \"level\"\n        ];\n        \n        const json2csvParser = new Parser({ fields });\n        const subsetcsv = json2csvParser.parse(subset);\n        \n        console.log(subset);\n    // window.location.href ='http://localhost:3000/result';            //This can be used for redirecting.\n    \n     // now subset contains json format and csv contains subsetcsv format.\n       \n}\n\n\nconst Filter = () => {\n   \n    return (\n        <div style={{height:`${window.innerHeight-85}px`}}> \n            <div style={{paddingTop:\"200px\", textAlign:\"center\", fontSize:'40px', fontFamily:'Righteous', color:'#0099cc'}}> Select attack to simulate: </div>\n        <div style={{margin:\"100px 200px\"}}>\n           \n             <Grid container spacing={3}>\n            <Grid item xs={3}>\n                <Fab variant=\"extended\" onClick={(e)=>convert(e,\"neptune\")} >\n                    <NavigationIcon  />\n                    Neptune\n                </Fab>\n            </Grid>\n            <Grid item xs={3}>\n                <Fab variant=\"extended\" onClick={(e)=>convert(e,\"guess_passwd\")}>                   {/*fab stands for floating action buttons*/}\n                    <NavigationIcon  />                                                     \n                    guess_passwd\n                </Fab>\n            </Grid>\n\n            <Grid item xs={3}>\n                <Fab variant=\"extended\" onClick={(e)=>convert(e,\"satan\")} >\n                    <NavigationIcon  />\n                   satan\n                </Fab>\n            </Grid>\n            <Grid item xs={3}>\n                <Fab variant=\"extended\" onClick={(e)=>convert(e,\"normal\")}>\n                    <NavigationIcon  />\n                    normal\n                </Fab>\n            </Grid>  \n            </Grid>\n            </div>\n            \n            <a href='http://localhost:3000/result' style={{color:'black'}} >result page</a>\n            <div className='button-details' style={{marginTop:'100px'}}>\n            <button>Sign Out</button>\n            </div>\n        </div>\n    );\n};\n\nexport default Filter;"]},"metadata":{},"sourceType":"module"}